// <auto-generated />
using BankStatInfrastructure.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BankStatInfrastructure.Migrations
{
    [DbContext(typeof(BankContext))]
    partial class BankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("AccountEntityOperationEntity", b =>
                {
                    b.Property<string>("AccountEntityId")
                        .HasColumnType("TEXT");

                    b.Property<string>("OperationEntityId")
                        .HasColumnType("TEXT");

                    b.HasKey("AccountEntityId", "OperationEntityId");

                    b.HasIndex("OperationEntityId");

                    b.ToTable("AccountEntityOperationEntity");
                });

            modelBuilder.Entity("BankStatInfrastructure.Entities.AccountEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("UserId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankStatInfrastructure.Entities.CurrencyEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iso")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("BankStatInfrastructure.Entities.OperationEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<string>("CurrencyId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ReceiverId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SenderId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Operations");
                });

            modelBuilder.Entity("BankStatInfrastructure.Entities.ProductEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("BankStatInfrastructure.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AccountEntityOperationEntity", b =>
                {
                    b.HasOne("BankStatInfrastructure.Entities.AccountEntity", null)
                        .WithMany()
                        .HasForeignKey("AccountEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankStatInfrastructure.Entities.OperationEntity", null)
                        .WithMany()
                        .HasForeignKey("OperationEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankStatInfrastructure.Entities.AccountEntity", b =>
                {
                    b.HasOne("BankStatInfrastructure.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("BankStatInfrastructure.Entities.UserEntity", "User")
                        .WithMany("Accounts")
                        .HasForeignKey("UserId");

                    b.Navigation("Currency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankStatInfrastructure.Entities.OperationEntity", b =>
                {
                    b.HasOne("BankStatInfrastructure.Entities.CurrencyEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankStatInfrastructure.Entities.AccountEntity", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BankStatInfrastructure.Entities.AccountEntity", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("BankStatInfrastructure.Entities.ProductEntity", b =>
                {
                    b.OwnsOne("BankStatInfrastructure.Entities.ProductInfoEntity", "ProductInfo", b1 =>
                        {
                            b1.Property<string>("ProductEntityId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("AccountId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("TEXT");

                            b1.Property<string>("CurrencyId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ProductEntityId");

                            b1.HasIndex("AccountId");

                            b1.HasIndex("CurrencyId");

                            b1.ToTable("ProductInfos");

                            b1.HasOne("BankStatInfrastructure.Entities.AccountEntity", "Account")
                                .WithMany()
                                .HasForeignKey("AccountId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("BankStatInfrastructure.Entities.CurrencyEntity", "Currency")
                                .WithMany()
                                .HasForeignKey("CurrencyId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductEntityId");

                            b1.Navigation("Account");

                            b1.Navigation("Currency");
                        });

                    b.Navigation("ProductInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("BankStatInfrastructure.Entities.UserEntity", b =>
                {
                    b.Navigation("Accounts");
                });
#pragma warning restore 612, 618
        }
    }
}
